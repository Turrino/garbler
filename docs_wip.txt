WRGRBRLER

Breadcrumbs
	Main level >
		Crumbsets: templates, characters, locations, etc >
			Crumblists: a list of positional elements >
				Positional Element: a word or sentence to be used as building block. e.g. 1/2/3rd component of a name or sentence.
				Subset: expands a single positional element into a list of positional elements that can be used for contextual reasons (e.g. male/female).
				Can be any lenght.
		
	Specific Crumbsets > 
		event_patterns: a set of joined crumblists that determines the flair of an event, e.g. a sudden apparition, stopping at a place, etc.
			It does not determine the outcome or the mood of the event, it is only needed to restrict the amount of building blocks to a coherent set.		

    Events in crumnbs:
        Events are structured as Blocks>Variants>Segments>Outcomes
            Block: list of variants and a fork pointing to other blocks
            Variants: lists of segments; one set of segments is randomly chosen (e.g. no multipliers or lucky dust)
            Segment: each segment has multiple possible outcomes, only one is chosen (using multipliers)
            Outcomes: has a text skeleton that goes to compose the overall event; also defines if there are drops or not
                Drops: defines if an outcome drops lucky dust or not, and any item drops (as well as any other special drop)

Items drops:
    In crumbs: "items" example: [["type_a",2,50],["type_b",1,100]]
     items is a list of possible drops, each element of the list containing:
     - Item type
     - Item maximum tier (upper limit for the random range)
     - Rate of drop (percentage points)
     When generating an item: for each tier, the generator will have an amount of points (fixed at 2, could be configurable)
      that will be randomly allocated in sections, either mods or durability.
       Each section will have at least 1pt / 10% of the points, whichever is smaller

Lucky Dust (LD)
    Can be carried, not an item. Affects events. The amount carried is defined at the start of the events.
    Note about branch length and dust: currently we distribute ld at each segment, using the deepest possible branch
    as a distribution parameter. However, if the branch is the deepest branch is not the one we actually go through,
    we end up with shorter brnaches having an unfair ld allocation. At the moment the solution is to keep the depth
    of all branches similar (+/- 10%), but this needs fixing somehow.

Peeps	
	Properties
		Gender: 0 for female, 1 for male
		
Location
	Properties
	
Event
	Properties
		Mood: determines the direction this event will take. 0: downward, 1: neutral, 2: upward			

Replacements syntax:
    Replacements must start and end with the @ character and match an element in the crumbs: "i want an @items@"
    If they are to be displayed, they have to use the # tag, followed by the overlay channel index,
    before the closing @ tag: "i want an @items#1@"
    To specify the position in the overlay channel, use two comma separated numbers: "i want an @items#2,5@"
    To indicate a replacement that does not live directly under the root of the crumbs,
     specify the path separated by commas: "i want an @items,type_a#2,5@"
    To get a replacement without specifying the path past a certain level (sub type is chosen at random),
     use the ~ tag: "i want an @items,~#2,5@"
    To specify a subset (e.g. male, female), use the $ tag followed by the subset index: "i want an @items,~$0#2,5@"

    For any of the above: do not include spaces.


Image generation
    Overlays
        Channels:
        Eigth channels for now, if we ever need more: make this more flexible.
            (255, 0, 0) (red) = ?
            (255, 170, 0) (orange) = ?
            (212, 255, 0) (lime) = ?
            (0, 255, 85) (green) = ?
            (0, 255, 255) (cyan) = ?
            (0, 85, 255) (blue) = ?
            (85, 0, 255) (violet) = ?
            (255, 0, 255) (pink) = ?
		
To do's:
- Schema check on the breadcrums, e.g.: a single item in a crumlist in an event crumbset can be a single item (1 item = universal mood, gets picked regardless),
	or a list. If it is a list, it must have 3 items (mood subsets).
	Otherwise the garbler might crash at runtime if it tries to fetch a mood that does not exist.


